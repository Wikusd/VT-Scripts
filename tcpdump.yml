# Velocity Trade
# Network Debug Script Version: 1
# First Release Date: 2022-09-09
# Last Modified Date: 2022-09-15
# Author: Wikus Du Plessis
# Description: Run network debug tests on the remote server and retrieve logs, enable sharing of network debugging information with third parties.

# Ansible Playbook

#VARIABLES
  vars:
      cap_file: packet_capture_{{ ansible_hostname }}_{{ ansible_date_time['epoch'] }}.pcap
      mtr_file: mtr_capture_{{ ansible_hostname }}_{{ ansible_date_time['epoch'] }}.log
      ping_file: ping_capture_{{ ansible_hostname }}_{{ ansible_date_time['epoch'] }}.log
      telnet_file: telnet_capture_{{ ansible_hostname }}_{{ ansible_date_time['epoch'] }}.log
    
#Prompt for runtime configuration variables.
  vars_prompt:

    - name: destination_ip
      prompt: Specify the destination IP.
      default: ""
      private: no

    - name: destination_port
      prompt: Specify the destination port.
      private: no

    - name: protocol
      prompt: Please specify the protocol type(tcp/udp).
      default: "tcp"
      private: no
    
    - name: log_folder
      prompt: Please specify the local log folder (location on remote server e.g. /var/tmp/)
      private: no

    - name: duration
      prompt: Specify the duration in seconds for the time you want to capture a tcpdump.
      private: no
      default: 60
  

# START TASKS
  tasks:
#Ensures all required network tools are installed and enabled.
    - name: ensure_package_state
      ansible.builtin.yum:
        name:
          - gzip
          - tcpdump
          - mtr
          - ping
          - telnet
          - curl
          - tar

        state: present

# Start the tcpdump service with filter in an async state. The dump will run in the background while we do other high-level network traffic tests.
    - name: start_tcpdump
      async: {{duration}}
      poll: 0
      command: sudo tcpdump -w {{cap_file}} host {{destination_ip}}
      register: async_tcpdump

# Run My Trace Route utility on specify port/ip/count & protocol.
    - name: start_mtr 
      command: sudo mtr {{destination_ip}} -C {{count}} --{{protocol}} --report >> {{mtr_file}}

# Run a stock standard ICMP ping
    - name: start_ping 
      command: sudo ping {{destination_ip}} -c {{count}} -D >> {{ping_file}}

# Check if remote port is open and currently in an active listening state. Similiar to the telnet port check.
    - name: start_telnet
      command: ( sudo timeout 10 bash -c '</dev/tcp/{{destination_ip}}/{{destination_port}} && echo PORT OPEN || echo PORT CLOSED') 2>/dev/null

# Logical pause to wait for the tcpdump utility to finish before consolidating logs.
    - name: tcpdump_sync_timeout
      ansible.builtin.async_status:
        jid: '{{ async_tcpdump.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      retries: {{duration}}
      delay: 2

# Consolidate and ship the logs back to ansible tower for further analysis.
    - name: compress_captured_file
      command: sudo tar -czvf ansible_tcp_logs.tar.gz {{cap_file}} {{mtr_file}} {{ping_file}} {{telnet_file}} 
      
    - name: change_file_permission
      command: sudo chmod 777 ansible_tcp_logs.tar.gz

    - name: retrieve_logs
      fetch: src=ansible_tcp_logs.tar.gz dest=/export/tmp/ansible/ flat=yes

    - name: cleanup_logs
      command: sudo rm -rf ansible_tcp_logs.tar.gz

# ///TODO/// 
# 1) Send email with attached log files to specified email addresses. Will require SMTP authentication.
# 2) Add additional troubleshooting tools to expand the scope of debug to disks, CPU and Memory consumption. Alternatively, create seperate jobs consisting of the following.
#    Can be consolidated into a single work-flow for modular deployment and execution.